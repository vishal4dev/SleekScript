#configuring initial setup

->To create a new project using Vite (a build tool for modern web development), you can use the following command:  "npm create vite@latest" lets me choose between different frontend templates->react,vue,vanilla

->moved to project folder and installed dependecies : npm i

->installed tailwind css 
->removed unwanted files, removed *app.css

!!!Stuck 1 -> snippets for react would not work , wasted 5-10 mins to no solution. just 5 secs forward the tutor solved the problem
         sol - ES7 extension
               auto rename tag(already present)
               tailwind css intellisence

->Added the initial config to github
-------------------------------------------------------------

->created pages and routes for the project 
       installed react-router-dom
       created routes for all pages    

->created header componets using - flowbite react(wrote a hell lot of styling contexts) 
                                   and react-icons            


-------------------------------------------------------------
//create and run the server

->need to create the backend inside the root directory- why? bcuz when we deploy the app that server is going to read file in the root directory and understand our code

->in the root directory "npm init -y" creates a package.json
->create a folder in the root dir (call it api) and create a file index.js
->to create a simple express server we can use ""const require = require('express')"" but if you want to do the import express from 'express; type then you need to change the type in package.json file to type:module

->added scripts for dev(dev) and user(start) mode
  dev: "nodemon index.js" in the package.json file

to run : npm run dev   
---------------------------------------------------------------
//connect to the database

->use mongodb , made a clustor and connected it to the project 
->databse pass = hotblogs
->to hide the pass from the string of the databse generated we created environment varible
which takes a key and replaces it with a value like the string here, else we'll be uploadiing the password on github


-------------------------------------------------------
//creating user model
creating schemas(rules):
In the context of your code snippet, it seems that you are creating schemas or rules for your database. These schemas define the structure and constraints for the data that will be stored in the database. 

For example, a schema might define a "User" table with columns like "id", "name", and "email". It can also specify constraints such as primary keys, foreign keys, and unique constraints. These schemas help ensure data integrity and consistency within the database.

By creating schemas, you are essentially defining the blueprint for how your data will be organized and stored in the database. This allows you to enforce data validation and maintain data consistency throughout your application.

---------------------------------------------------------

//create a test api routes
its a good practice to crate diffrent folders for routes we call them controllers , controllers have logics and functions

its not a good practice to put all the api routes in index.js so we create a folder routes

its also not a good practice to write all the logic in routes so we create a new folder controllers to define these control logics and functions

app.get is a method in Express.js used for defining routes that only handle HTTP GET requests.
It specifies a callback function to be executed when a GET request with the specified route pattern is received.

app.use is a method in Express.js used for mounting middleware functions.
Middleware functions are functions that have access to the request object (req), the response object (res), and the next middleware function in the application's request-response cycle.

!!!problem
The problem was with how the routes were being mounted in your main file (`main.js`). In your initial code, you were using `app.get('/api/user/test', userRoutes)` to mount the `userRoutes` router, which was incorrect.

The `app.get` method is used to define a route handler for HTTP GET requests, but you wanted to mount an entire router (`userRoutes`) under a specific path. For that purpose, you should use `app.use` instead of `app.get`.

So, the correction involved changing `app.get('/api/user/test', userRoutes)` to `app.use('/api/user', userRoutes)`. This tells Express to use the `userRoutes` router for any path that starts with `/api/user`, which includes the `/test` route you defined inside `userRoutes`.

By making this change, your server correctly routes requests to `/api/user/test` to the `test` function defined in your `user.controller.js`.


----------------------------------------------------
Creating signup api route

Again we started by making api routes ,  so we created auth.route in routes folder 
we want to create something so we'll use POST request

so we'll create the auth logic asynchronous..
When designing a signup authentication route, making it asynchronous is generally the preferred approach. Here are the key reasons why:

Non-blocking I/O Operations: Signup processes often involve operations that can take time, such as database access, sending verification emails, or calling third-party APIs. Asynchronous programming allows these operations to run concurrently without blocking the main execution thread, leading to better performance and responsiveness.

*We can test apis using softwares without having to make frontend.. eg - pausemon,insomnia(user-friendly)
downloaded insomnia
 
 ->not allowed to send json to backend

//try and hash all users password in database as someone can hack the database and getacces to all the pass 

to do the above i installed "bcryptjs"

In a MERN (MongoDB, Express.js, React, Node.js) stack application, the utils (utilities) directory is used to store utility functions and modules that can be reused throughout the application. These utilities often provide common functionality that is needed in multiple parts of the application, promoting code reuse and modularity.
---------------------------------------
//add functionality to signup page
for submission we'll add onsubmit event listener

//adding proxy in vite

when we are addin more than one http element inside a bracket we need to insert them inside empty brackets

using react hook for signup button to take me to other directory

----------------------------------------
//creating footer section
for all the functions that will be used throughout the web page we code it inside the component folder
  <div className='grid grid-cols-2 gap-3 sm:mt-4 sm:grid-cols-3 sm:gap-6'>
  //2 colums in small size and 3 columns in medium size// sm means small size and above

   target='_blank'//this will open the link in a new tab
                    rel='noopener noreferrer'>
                        //this prevents the new tab from accessing the window object of the parent tab

----------------------------------------------
 //create sign-in api route     
 created all the logic inside auth.controller.js
 ->authentication of the user:
    by using a package called json web token              

  What are Cookies?

Cookies are small text files stored on a user's device by a web browser. They are used to store information about the user, such as their preferences, login information, or other data. In the context of authentication, a cookie is generated by the server after a user is successfully authenticated, and it contains a unique session ID that is used to identify the user on subsequent requests. 

Why do we need them?

Both JWT and cookies are used to maintain user sessions and authenticate users on subsequent requests. They provide a way to verify the user's identity without requiring them to re-enter their login credentials.

---------------------------------------------------
//adding redux toolkit

added redux toolkit
downloaded an extension to track sign in procedure

to make the data persist as the data got instantiated after every refresh we will donwload another extension
redux toolkit this will save the info localy. So when we refresh the page we wont see the data vanish before our eyes
-------------------------------------------------
//oauthfunctionality using google

create a componet oauth
for signin and singup pages

to make a pop up window we are using firebase 
This is very important
-------------------------------------------------
//update header section with user data

-------------------------------------------------
//dark mode funtionality

-------------------------------------------------
//make the dashboard private
create a component that can protect this page and covert that page with that component
